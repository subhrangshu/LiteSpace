1000 thread -> Spawn 50
200 thread -> Spawn 10
50 thread -> Spawn 2.5
500 thread -> Spawn 25
2000 thread -> Spawn 100
1500 -> Spawn 75

$$$$$$$$$$$$$$$$$$$$$$ Redis takes 0.4% x 4, LiteSpace 5 x 1 %
A. 1 GB 1CPU
I. Files Test
1. Add Files
    a. 50 Threads
        i. 1kb (DONE)
        ii. 10kb (DONE)
        iii. 100kb (DONE)
        iv. 1mb (DONE)
        v. 10mb (DONE)
        vi. 100mb (DONE)
        vii. 1gb (DONE)
        viii. 10gb (CRASHED AT MIDDLE)
    b. 200 Threads
        i. 1kb (DONE)
        ii. 10kb (DONE)
        iii. 100kb (DONE)
        iv. 1mb (DONE)
        v. 10mb (DONE)
        vi. 100mb (DONE)
        vii. 1gb (DONE)
        viii. 10gb (CRASHED)
    c. 1000 Threads
        i. 1kb (DONE)
        ii. 10kb (DONE)
        iii. 100kb (DONE)
        iv. 1mb (DONE)
        v. 10mb (DONE)
        vi. 100mb (DONE)
        vii. 1gb (DONE)
        viii. 10gb (CRASHED)
2. View Files
    a. 50 Threads
        i. 1kb (DONE) (DONE)
        ii. 10kb (DONE) (DONE)
        iii. 100kb (DONE) (DONE)
        iv. 1mb (DONE) (DONE)
        v. 10mb (DONE) (DONE)
        vi. 100mb (DONE) (DONE)
        vii. 1gb (DONE) (DONE)
        viii. 10gb (CRASHED) (CRASHED)
    b. 200 Threads
        i. 1kb (DONE) (DONE)
        ii. 10kb (DONE) (DONE)
        iii. 100kb (DONE) (DONE)
        iv. 1mb (DONE) (DONE)
        v. 10mb (DONE) (DONE)
        vi. 100mb (DONE) (DONE)
        vii. 1gb (DONE) (DONE)
        viii. 10gb (CRASHED) (CRASHED)
    c. 1000 Threads
        i. 1kb (DONE) (DONE)
        ii. 10kb (DONE) (DONE)
        iii. 100kb (DONE) (DONE)
        iv. 1mb (DONE) (DONE)
        v. 10mb (DONE) (DONE)
        vi. 100mb (DONE) (DONE)
        vii. 1gb (DONE) (DONE)
        viii. 10gb (CRASHED) (CRASHED)

#################3. Delete Files

II. Redis Test
1. Add Files
    a. 50 Threads (DONE)
    b. 200 Threads (DONE)
    c. 1000 Threads (DONE)
2. View Files
    a. 50 Threads (DONE)
    b. 200 Threads (DONE)
    c. 1000 Threads (DONE)
3. Delete Files
    a. 50 Threads (DONE)
    b. 200 Threads (DONE)
    c. 1000 Threads (DONE)

IV. Gluster Test
1. Add Files
    a. 1 Threads
        i. 1kb (DONE)
        ii. 10kb (DONE)
        iii. 100kb (DONE)
        iv. 1mb (DONE)
        v. 10mb (DONE)
        vi. 100mb (DONE)
        vii. 1gb (DONE)
        viii. 10gb (DONE)
2. View Files
    a. 50 Threads
        i. 1kb (DONE)
        ii. 10kb (DONE)
        iii. 100kb (DONE)
        iv. 1mb (DONE)
        v. 10mb (DONE)
        vi. 100mb (DONE)
        vii. 1gb (DONE)
        viii. 10gb (DONE)
    b. 200 Threads
        i. 1kb (DONE)
        ii. 10kb (DONE)
        iii. 100kb (DONE)
        iv. 1mb (DONE)
        v. 10mb (DONE)
        vi. 100mb (DONE)
        vii. 1gb (DONE)
        viii. 10gb (DONE)
    c. 1000 Threads
        i. 1kb (DONE)
        ii. 10kb (DONE)
        iii. 100kb (DONE)
        iv. 1mb (DONE)
        v. 10mb (DONE)
        vi. 100mb (DONE)
        vii. 1gb (DONE)
        viii. 10gb (DONE)
##################3. Delete Files

V. Stress Test
1. 1mb (100000 requests each, 200second)
    i. Write
        a. 1 thread (DONE)
        b. 10 thread (DONE)
        c. 100 thread (DONE)
    ii. Read
        a. 1 thread (DONE)
        b. 10 thread (DONE)
        c. 100 thread (DONE)

VI. Raw Test
1. 1000 Threads (DONE)
2. 200 Threads (DONE)
3. 10 Threads (DONE)

B. 8 GB 4CPU
I. Files Test
1. Add Files
    a. 500 Threads
        i. 1kb (DONE)
        ii. 10kb (DONE)
        iii. 100kb (DONE)
        iv. 1mb (DONE)
        v. 10mb (DONE)
        vi. 100mb (DONE)
        vii. 1gb (DONE)
        viii. 10gb (CRASHED)
    b. 1000 Threads
        i. 1kb (DONE)
        ii. 10kb (DONE)
        iii. 100kb (DONE)
        iv. 1mb (DONE)
        v. 10mb (DONE)
        vi. 100mb (DONE)
        vii. 1gb (DONE)
        viii. 10gb (CRASHED)
2. View Files
    a. 500 Threads
        i. 1kb (DONE)
        ii. 10kb (DONE)
        iii. 100kb (DONE)
        iv. 1mb (DONE)
        v. 10mb (DONE)
        vi. 100mb (DONE)
        vii. 1gb (DONE)
        viii. 10gb (DONE)
    b. 1000 Threads
        i. 1kb (DONE)
        ii. 10kb (DONE)
        iii. 100kb (DONE)
        iv. 1mb (DONE)
        v. 10mb (DONE)
        vi. 100mb (DONE)
        vii. 1gb (DONE)
        viii. 10gb (CRASHED)

Test Tools:
1. JMeter
2. Seige
3. Wrk2
4. Locust: locust -f locustfile.py --headless --csv-full-history --run-time 15s --users 200 --spawn-rate 5 --csv=example --host https://en.wikipedia.com

Files Creation in Python:
with open("file.to.create", "wb") as out:
    out.truncate(1024 * 1024 * 1024)
